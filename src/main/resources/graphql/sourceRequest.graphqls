"""
Community request for a new source
"""
type SourceRequest {
    """
    Unique identifier
    """
    id: ID!

    """
    URL to the source website
    """
    sourceUrl: String!

    """
    Id of the user who requested this source
    """
    userId: ID!

    """
    Name of the user who requested this source
    """
    userName: String

    """
    Email of the user who requested this source
    """
    userEmail: String

    """
    Whether this request was approved
    """
    approved: Boolean

    """
    Whether this request is closed
    """
    closed: Boolean!

    """
    Id for the future source
    """
    sourceId: ID

    """
    Name of the future source
    """
    sourceName: String

    """
    URL for thumbnail image of the future source
    """
    sourceImage: String

    """
    Twitter handle of the future source
    """
    sourceTwitter: String

    """
    Feed (RSS/Atom) of the future source
    """
    sourceFeed: String

    """
    Reason for not accepting this request
    """
    reason: String

    """
    Time when the request was received
    """
    createdAt: DateTime!

    """
    Time of last update
    """
    updatedAt: DateTime!
}

type SourceRequestConnection {
    pageInfo: PageInfo!
    edges: [SourceRequestEdge!]!
}

type SourceRequestEdge {
    node: SourceRequest!

    """
    Used in `before` and `after` args
    """
    cursor: String!
}

input DeclineSourceRequestInput {
    """
    Reason for not accepting this request
    """
    reason: String!
}

input RequestSourceInput {
    """
    URL to the source website
    """
    sourceUrl: String! @url
}

input UpdateSourceRequestInput {
    """
    URL to the source website
    """
    sourceUrl: String @url

    """
    Id for the future source
    """
    sourceId: ID

    """
    Name of the future source
    """
    sourceName: String

    """
    URL for thumbnail image of the future source
    """
    sourceImage: String @url

    """
    Twitter handle of the future source
    """
    sourceTwitter: String

    """
    Feed (RSS/Atom) of the future source
    """
    sourceFeed: String @url
}

extend type Mutation {
    """
    Request a new source
    """
    requestSource(data: RequestSourceInput!): SourceRequest! @auth

    """
    Update the information of a source request
    """
    updateSourceRequest(
        data: UpdateSourceRequestInput!
        id: String!
    ): SourceRequest! @auth(requires: [MODERATOR])

    """
    Decline a source request
    """
    declineSourceRequest(
        data: DeclineSourceRequestInput!
        id: String!
    ): SourceRequest! @auth(requires: [MODERATOR])

    """
    Approve a source request (but doesn't publish it)
    """
    approveSourceRequest(id: String!): SourceRequest!
    @auth(requires: [MODERATOR])

    """
    Publish a source request and turn it into a source
    """
    publishSourceRequest(id: String!): SourceRequest!
    @auth(requires: [MODERATOR])

    """
    Upload a logo to a source request
    """
    uploadSourceRequestLogo(file: Upload!, id: String!): SourceRequest!
    @auth(requires: [MODERATOR])
}

extend type Query {
    """
    Get all pending source requests
    """
    pendingSourceRequests(
        """
        Paginate before opaque cursor
        """
        before: String

        """
        Paginate after opaque cursor
        """
        after: String

        """
        Paginate first
        """
        first: Int

        """
        Paginate last
        """
        last: Int
    ): SourceRequestConnection! @auth(requires: [MODERATOR])
}
