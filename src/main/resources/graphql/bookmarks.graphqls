type BookmarkList {
    """
    Unique identifier
    """
    id: String!

    """
    Name of the list
    """
    name: String!
}

type SearchBookmarksSuggestion {
    title: String!
}

type SearchBookmarksSuggestionsResults {
    query: String!
    hits: [SearchBookmarksSuggestion!]!
}

input AddBookmarkInput {
    """
    Post ids to bookmark
    """
    postIds: [ID]!
}

type Mutation {
"""
Add new bookmarks
"""
addBookmarks(data: AddBookmarkInput!): EmptyResponse! @auth

"""
Add or move bookmark to list
"""
addBookmarkToList(id: ID!, listId: ID): EmptyResponse! @auth(premium: true)

"""
Remove an existing bookmark
"""
removeBookmark(id: ID!): EmptyResponse! @auth

"""
Create a new bookmark list
"""
createBookmarkList(name: String!): BookmarkList! @auth(premium: true)

"""
Remove an existing bookmark list
"""
removeBookmarkList(id: ID!): EmptyResponse! @auth(premium: true)

"""
Rename an existing bookmark list
"""
renameBookmarkList(id: ID!, name: String!): BookmarkList!
@auth(premium: true)
}

type Query {
"""
Get the user bookmarks feed
"""
bookmarksFeed(
"""
Time the pagination started to ignore new items
"""
now: DateTime

"""
Paginate after opaque cursor
"""
after: String

"""
Paginate first
"""
first: Int

"""
Return only unread posts
"""
unreadOnly: Boolean = false

"""
Id of the list to retrieve bookmarks from
"""
listId: ID
): PostConnection! @auth

"""
Get all the bookmark lists of the user
"""
bookmarkLists: [BookmarkList!]! @auth(premium: true)

"""
Get suggestions for search bookmarks query
"""
searchBookmarksSuggestions(
"""
The query to search for
"""
query: String!
): SearchBookmarksSuggestionsResults!

"""
Search through users bookmarks
"""
searchBookmarks(
"""
The query to search for
"""
query: String!

"""
Time the pagination started to ignore new items
"""
now: DateTime

"""
Paginate after opaque cursor
"""
after: String

"""
Paginate first
"""
first: Int

"""
Return only unread posts
"""
unreadOnly: Boolean = false

"""
Id of the list to retrieve bookmarks from
"""
listId: ID
): PostConnection! @auth
}
